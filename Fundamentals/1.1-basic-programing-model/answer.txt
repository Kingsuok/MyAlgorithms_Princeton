1. 
a. 7  b. 200.0000002  c. true

2.
a. 1.618 b. 10.0 c. true d. 33 (an integer adds a string: the integer will be tranfered to a string first, then the string is added in front of the original string ) Eg. 2+3 + “2” = “52”

3.

import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

public class TestFirst3 {
public static void main(String[] args){
	int a,b,c;
	StdOut.println("Please input three number:");
	a = StdIn.readInt();
	b = StdIn.readInt();
	c = StdIn.readInt();
	if (equals(a,b,c) == true){
		StdOut.print("equal");
	}else{
		StdOut.print("not equal");
	}
	
}

public static boolean equals(int a, int b, int c){
	
	if (a == b && b == c)
	{
		return true;
	}else{
		return false;
	}
}
}

4.
a. if (a > b) c = 0;  b. if (a > b) { c = 0; } d. if (a > b) c = 0; else b = 0;

5.

import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

public class TestFirst5 {

	public static void main(String[] args){
		double x;
		double y;
		StdOut.println("Please input two double numbers:");
		x = StdIn.readDouble();
		y = StdIn.readDouble();
		/*if (checks(x) && checks(y)){
			StdOut.print("true");
		}else{
			StdOut.print("false");
		}*/
		StdOut.print(checks(x) && checks(y));
	}
	
	public static boolean checks(double x ){
		if (0 < x && x < 1  ){
			return true;
		}else{
			return false;
		}
	}
}

6.
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610

7. 
a. 3.00009  b. 499500 c.10000

8.
In java, when the char variables are in the calculation, the char variables will be regarded as the value of Asscii.
a.  b (because just output a char, not a calculation in which char variables are, just output the char) 
b. 197 (because using the asscii values, so ..) 
c. e (cast decimalism to char )

9.
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

public class TestFirst9 {

	public static void main (String[] args){
		StdOut.println("Please input the N:");
		int N = StdIn.readInt();
		//String s = convert(N);
		StdOut.println(convert(N));
	}
	
	public static String convert(int n){
		String s = "";
		for (int i = n; i > 0; i = i/2){
			s = i%2 + s; 
		}
		return s;
	}
}

10.
It does not allocate memory for a[] with new. This code results in a variable a might not have been initialized compile-time problem.
The correct codes:
import edu.princeton.cs.algs4.StdOut;

public class Test {

	public static void main(String[] args){
		
		int[] a = new int[10];
		for (int i = 0; i < 10; i++){
			a[i] = i*i;
			StdOut.print(a[i] + " ");
		}
	}
}

11.
import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.StdRandom;

public class TestFirst11 {

	public static void main(String[] args){
		boolean[][] array = new boolean[10][10];
		randomInitialization(array);
		printArray(array);
	}
	public static void printArray(boolean[][] array){
		int length = array.length;
		for (int i = 0; i < length; i++){
			StdOut.println();
			for (int j = 0; j < length; j++){
				if(array[i][j]){
					StdOut.print("array[" + i + "]" + "[" + j +"] = "+ "*" + " ");
				}else{
					StdOut.print("array[" + i + "]" + "[" + j +"] = "+ " " + " ");
				}
			}
		}
	}
	public static boolean[][] randomInitialization(boolean[][] array){
		int length = array.length;
		for(int i = 0; i < length; i++){
			for(int j = 0; j < length; j++){
				if (StdRandom.bernoulli(0.5)){
					array[i][j] = true;
				}else{
					array[i][j] = false;
				}
			}
		}
		return array;
	}
	
12.
0
1
2
3
4
4
3
2
1
0
13.
import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.StdRandom;

public class TestFirst13 {

	public static void main(String[] args){
		int[][] array = new int[10][8];
		arrayInitialization(array, 10);
		StdOut.print("The original array:");
		printArray(array);
		int[][] arrayTransposition = transposition(array);
		StdOut.printf("\nThe transposition array:");
		printArray(arrayTransposition);
	}
	
	public static void printArray(int[][] a){
		int rawLength = a.length;
		int columnLength = a[0].length;
		for (int i = 0; i < rawLength; i++){
			StdOut.println();
			for (int j = 0; j < columnLength; j++){
				StdOut.print(a[i][j]+" ");
			}
		}
	}
	public static int[][] transposition(int[][] a){
		int rawLength = a.length;
		int columnLength = a[0].length;
		int[][] aTrans = new int[columnLength][rawLength];
		for (int i = 0; i < rawLength; i++){
			for (int j = 0; j < columnLength; j++){
				aTrans[j][i] = a[i][j];
			}
		}
		return aTrans;
	}
	public static void arrayInitialization(int[][] a, int N){
		int rawLength = a.length;
		int columnLength = a[0].length;
		for (int i = 0; i < rawLength; i++){
			for (int j = 0; j < columnLength; j++){
				a[i][j] = StdRandom.uniform(N);
			}
		}
	}
}
14.
clue: convert thinking using match knowledge:
How to deal with log2N:
Deduce:
		log2N ≥ x
                2^(log2N) ≥ 2^x
                N ≥ 2^x；
      N: input parameter, x: goal result.
      
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

public class TestFirst14 {

	public static void main(String[] args){
		StdOut.println("Please input the integer value N:");
		int N = StdIn.readInt();
		int result = lg(N);
		StdOut.print(result);
	}
	public static int lg(int N){
		int result = 0;
		int temporary = 1;
		if (N <= 0){
			throw new RuntimeException("Error, N should be larger than 0");
		}else{
		while (N >= temporary){// notice the "="
			result++;
			temporary*=2;
		}
		return --result;
		}
	}
}      
  
15.
	public static int[] histogram(int[] a, int M){
		int length = a.length;
		int[] count = new int[M];
		for(int i = 0;i < M-1;i++ ){
			count[i] = 0;
		}
		for(int i = 0 ;i < length; i++){
			if (0 <= a[i] && a[i] <= M-1){
				count[a[i]]++;
			}
		}
		return count;
	}
16.
311361142246
clue:when a string + a integer, the integer will be transfered to be a string, then two strings are added.

17. when the program meets the recursive function, it will not execute the following codes of the function but execute from the original function. So the base case will never be reached. A call to exR2(3) will result in calls to exR2(0) exR2(-3), exR2(-6) and so forth until a StackOverFlowError occurs.

The fixed codes:

	public static String exR2(int n){
		if (n <= 0) return "";
		String s = exR2(n - 3) + n + exR2(n - 2);
		return s;
	}
18.
mystery(2,25) = 50, mystery(3,11) = 33,mystery(a,b) = a*b.
if replace + with * and replace return 0 with retrun 1, mystery(2,25) = 2^25, mystery(3,11) = 3^11,mystery(a,b) = a^b.

19.
public static long[] F(int N){
		long[] array = new long[N+1];
		if (N == 0){
			array[0] = 0;
		}else if (N == 1){
			array[0] = 0;
			array[1] = 1;
		}else {
			array[0] = 0;
			array[1] = 1;
			for (int i =2; i < N; i++){
				array[i] = array[i-1] + array[i-2];
			}
		}
		return array;
	}
	
20.
import edu.princeton.cs.algs4.StdOut;

public class TestFirst20 {

	public static void main (String[] args){
		StdOut.print(factorialLn(5));
	}
	
	public static double factorialLn(int N){
		if (N == 1) return 0;
		return factorialLn(N-1) + Math.log(N);
	}
	
}

21.

import java.util.ArrayList;
import java.util.List;

import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

public class TestFirst21 {

	public static void main(String[] args){
		output(input());
	}
	public static List<String[]> input(){
		List<String[]> inputValue = new ArrayList<String[]>();
		// in the console of IDE(eclipse), for windows: using Ctrl + z to EOF, for linux: Ctrl + d 
		while (StdIn.hasNextLine()){
			String data = StdIn.readLine();//read a line from the stdinput
			String[] in = data.split(" ");// split a string to String[] basing on " " 
			inputValue.add(in);
		}
		return inputValue;
	}
	public static void output( List<String[]> input){
		for (String[] infor : input){
			float score = Float.parseFloat(infor[1])/Float.parseFloat(infor[2]);
			StdOut.print(infor[0] + " " + infor[1] + " " + infor[2] + " ");
			StdOut.printf("%.3f\n", score);
		}
	}
}

22.
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.StdRandom;

public class TestFirst22 {
	
	public static void main(String[] args){
		output(input());
	}
	
	public static Map input(){
		// input an array from the console 
		StdOut.println("Please input an array:");
		String[] arrayString = StdIn.readLine().split(" ");
		int[] arrayIn = new int[arrayString.length];
		for (int i = 0; i < arrayString.length; i++){
			arrayIn[i] = Integer.parseInt(arrayString[i]);
		}
				
		/*
		// input an array from random generator
		   int[] arrayIn = new int[10];
		   for (int i = 0; i < arrayIn.length; i++) {
		      arrayIn[i] = StdRandom.uniform(10);
		   }
		*/
				
		Arrays.sort(arrayIn);
		StdOut.println("Please input the key:");
		int key = StdIn.readInt();
		Map<Integer,int[]> inputValue = new HashMap<Integer,int[]>();
		inputValue.put(key, arrayIn);
		return inputValue;
	}
	
	public static void output(Map<Integer, int[]> inputValue){
		for (Entry<Integer, int[]> entry:inputValue.entrySet()){
			int key = entry.getKey();
			int[] array = entry.getValue();
			int result = rank(key , array);
			if (result == -1){
				StdOut.print("The key is not in the array.");
			}else{
				StdOut.print("The key is in the array");
			}	
		}	
	}
	public static int rank(int key,int[] a){
		return rank(0,key, a, 0, a.length-1);
	}
	public static int rank(int deepth, int key, int[] a, int lo, int hi ){
		for (int i = 0; i < deepth; i++){
			StdOut.print(" ");
		}
		StdOut.println("lo = " + lo + " hi = " + hi);
		if (lo > hi) return -1;
		int mid = lo + (hi - lo)/2;
		if (key < a[mid]) 
			return rank(deepth+1, key, a, lo, mid -1);
		else if (key > a[mid]) 
			return rank(deepth+1, key, a, mid + 1, hi);
		else if (key == a[mid])
			return mid;
		else
			return -1;
				
	}
}

23.
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

public class TestFirst23 {
		
		public static void main(String[] args){
			output(input());
		}
		
		public static Map input(){
			// input an array from the console 
			StdOut.println("Please input an array:");
			String[] arrayString = StdIn.readLine().split(" ");
			int[] arrayIn = new int[arrayString.length];
			for (int i = 0; i < arrayString.length; i++){
				arrayIn[i] = Integer.parseInt(arrayString[i]);
			}
					
			/*
			// input an array from random generator
			   int[] arrayIn = new int[10];
			   for (int i = 0; i < arrayIn.length; i++) {
			      arrayIn[i] = StdRandom.uniform(10);
			   }
			*/
					
			Arrays.sort(arrayIn);
			StdOut.println("Please input the key:");
			String key = StdIn.readString();
			StdOut.println("Please input the print command(+/-):");
			String printCommand = StdIn.readString();
			Map<String[],int[]> inputValue = new HashMap<String[],int[]>();
			String[] in = {key, printCommand};
			inputValue.put(in, arrayIn);
			return inputValue;
		}
		
		public static void output(Map<String[], int[]> inputValue){
			for (Entry<String[], int[]> entry:inputValue.entrySet()){
				int key = Integer.parseInt(entry.getKey()[0]);
				char printCommand = entry.getKey()[1].charAt(0);
				int[] array = entry.getValue();
				int result = rank(key , array);
				if (result == -1 && printCommand == '+'){
					StdOut.print("The key "+ key +" is not in the array.");
				}else if (result != -1 && printCommand == '-'){
					StdOut.print("The key "+ key +" is in the array.");
				}	
			}	
		}
		public static int rank(int key,int[] a){
			return rank(key, a, 0, a.length-1);
		}
		public static int rank( int key, int[] a, int lo, int hi ){
			if (lo > hi) return -1;
			int mid = lo + (hi - lo)/2;
			if (key < a[mid]) 
				return rank(key, a, lo, mid -1);
			else if (key > a[mid]) 
				return rank( key, a, mid + 1, hi);
			else if (key == a[mid])
				return mid;
			else
				return -1;
					
		}
	}
	
24.
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

public class TestFirst24 {

	public static void main(String[] args){
		input();
	}
	
	public static void input() {
		StdOut.println("Please input the first integer:");
		int p = StdIn.readInt();
		StdOut.println("Please input the second interger:");
		int q = StdIn.readInt();
		if (p < q){
			int temp = p;
			p = q;
			q = temp;
		}
		int result = euclid(p,q);
		StdOut.print("The greatest common divisor of "+ p +" and " + q + " is " + result);
	}
	public static int euclid(int p, int q){
		StdOut.println("The first argument p is " + p + ", the second argument q is " +q);
		if (q ==0) return p;
		int r = p % q;
		return euclid(q,r);
	}
}

The result of the greatest common divisor of 1111111 and 1234567:

Please input the first integer:
1111111
Please input the second interger:
1234567
The first argument p is 1234567, the second argument q is 1111111
The first argument p is 1111111, the second argument q is 123456
The first argument p is 123456, the second argument q is 7
The first argument p is 7, the second argument q is 4
The first argument p is 4, the second argument q is 3
The first argument p is 3, the second argument q is 1
The first argument p is 1, the second argument q is 0
The greatest common divisor of 1234567 and 1111111 is 1

25.
	Using mathematical induction to prove Euclid's algorithm.
	
	Euclid's algorithm appears as the solution to the problem:
	Given two numbers not prime to one another, to find their greatest common measure.
	
	Recall that the greatest common divisor (GCD) of two integers A and B is the largest integer that divides both A and B.

	The Euclidean algorithm is a technique for quickly finding the GCD of two integers.

	The algorithm

	The Euclidean algorithm for finding GCD(A,B) is as follows:

	If A = 0 , then GCD(A,B)=B since the GCD(0,B)=B, and we can stop.  
	If B = 0 , then GCD(A,B)=A since the GCD(A,0)=A, and we can stop.  
	Write A in quotient remainder form A=B*Q+R. 
	Find GCD(B,R) using the Euclidean algorithm since GCD(A,B) = GCD(B,R).
	
	testify:
		basing on the quotient and remainder, exist q and r to satisfy:
		a = b*q + r, 
		we need to testify that the set of common divisor of a and b is the same as the set of common divisor of b and r.
		Let c is one of common divisors of a and b(in other words, c|a and c|b ,Notice: c|a means that a can be divided by c without a remainder),
		as a = b*q + r, so c|a = c|(b*q+r) and c|b -->c|(b*q), just because c|(b*q) so c|r holds.
		in a whole, c is also a divisor of r ---> c is a common divisor of r and b.
		
		Otherwise, if c is a common divisor of r and b, then c|(b*q) and c|(b*q + r), so c is a common divisor of a and b.
		
		In a sum, the set of common divisor of a and b is the same as the set of common divisor of b and r.
		
		gcd(a,b) = gcd (b,r).
		
		
		注意： c|a 表示 a 可以整除 c（没有余数）， 而不是表示 c 除以 a 或 c 可以整除 a
		欧几里德算法证明中,为什么已知d|a且d|b且a=kb+r时,就得到d|r?
		由d|a知存在整数m1使得a = m1*d；由d|b知存在整数m2使得b = m2 * d.
        r = a - k*b = m1*d - k * m2 * d = (m1 - k * m2) * d,m1-k*m2为整数,则d|r.
		
		
		欧几里得算法：
          如果a是一个非负整数，b是一个正整数，r = a mod b，
          那么 a 和 b 的最大公约数等价于 b 和 r 的最大公约数
          即  gcd(a, b) = gcd(b, r)
      证明：
      
          依商和余数定理，存在q和r，满足：
              a = bq + r , 0 £ r < b
          如果可以证明a和b的公因子集合等于b和r公因子集合，就可以证明这个定理了。
          令c是a和b的一个公因子。
          有 c|(b*q)，由于 c|a 且 c|(b*q)，则 c|(a-b*q)，即c|r。
          所以c是b和r的一个公因子。
          反之，如果c是b和r的一个公因子，那么 c|(b*q) 且 c|(b*q+r)，所以c是a和b的一个公因子。
          因此a和b的公因子集合等于b和r的公因子集合。
          因此gcd(a,b)=gcd(b,r)。
          
          26.
          
          Testify:
          From if (a > b) {t = a; a = b; b = t}, can get : a < b.
          For the same reason, a < c, b < c; combining the three ---> a < b < c.
          
          27.
          
